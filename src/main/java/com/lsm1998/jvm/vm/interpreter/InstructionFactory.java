package com.lsm1998.jvm.vm.interpreter;

import com.lsm1998.jvm.vm.interpreter.instruction.comparisons.*;
import com.lsm1998.jvm.vm.interpreter.instruction.constants.Nop;
import com.lsm1998.jvm.vm.interpreter.instruction.Instruction;
import com.lsm1998.jvm.vm.interpreter.instruction.constants.*;
import com.lsm1998.jvm.vm.interpreter.instruction.control.GoTo;
import com.lsm1998.jvm.vm.interpreter.instruction.control.LookUpSwitch;
import com.lsm1998.jvm.vm.interpreter.instruction.control.TableSwitch;
import com.lsm1998.jvm.vm.interpreter.instruction.conversations.*;
import com.lsm1998.jvm.vm.interpreter.instruction.loads.*;
import com.lsm1998.jvm.vm.interpreter.instruction.math.*;
import com.lsm1998.jvm.vm.interpreter.instruction.stack.*;
import com.lsm1998.jvm.vm.interpreter.instruction.stores.*;

import java.util.HashMap;
import java.util.Map;

/**
 * @作者：刘时明
 * @时间：2019/3/22-20:13
 * @说明：
 */
public class InstructionFactory
{
    private static final Instruction nop = new Nop();
    private static final Instruction aConstNull = new AConst_Null();
    private static final Instruction iConst_m1 = new IConst_M1();
    private static final Instruction iConst_0 = new IConst_0();
    private static final Instruction iConst_1 = new IConst_1();
    private static final Instruction iConst_2 = new IConst_2();
    private static final Instruction iConst_3 = new IConst_3();
    private static final Instruction iConst_4 = new IConst_4();
    private static final Instruction iConst_5 = new IConst_5();
    private static final Instruction lConst_0 = new LConst_0();
    private static final Instruction lConst_1 = new LConst_1();
    private static final Instruction fConst_0 = new FConst_0();
    private static final Instruction fConst_1 = new FConst_1();
    private static final Instruction fConst_2 = new FConst_2();
    private static final Instruction dConst_0 = new DConst_0();
    private static final Instruction dConst_1 = new DConst_1();
    private static final Instruction biPush = new BIPush();
    private static final Instruction siPush = new SIPush();
    // private static final Instruction idc = new Idc();
    // ...
    private static final Instruction iLoad = new ILoad();
    private static final Instruction lLoad = new LLoad();
    private static final Instruction fLoad = new FLoad();
    private static final Instruction dLoad = new DLoad();
    private static final Instruction aLoad = new ALoad();
    private static final Instruction iLoad_0 = new ILoad_0();
    private static final Instruction iLoad_1 = new ILoad_1();
    private static final Instruction iLoad_2 = new ILoad_2();
    private static final Instruction iLoad_3 = new ILoad_3();
    private static final Instruction lLoad_0 = new LLoad_0();
    private static final Instruction lLoad_1 = new LLoad_1();
    private static final Instruction lLoad_2 = new LLoad_2();
    private static final Instruction lLoad_3 = new LLoad_3();
    private static final Instruction fLoad_0 = new FLoad_0();
    private static final Instruction fLoad_1 = new FLoad_1();
    private static final Instruction fLoad_2 = new FLoad_2();
    private static final Instruction fLoad_3 = new FLoad_3();
    private static final Instruction dLoad_0 = new DLoad_0();
    private static final Instruction dLoad_1 = new DLoad_1();
    private static final Instruction dLoad_2 = new DLoad_2();
    private static final Instruction dLoad_3 = new DLoad_3();
    private static final Instruction aLoad_0 = new ALoad_0();
    private static final Instruction aLoad_1 = new ALoad_1();
    private static final Instruction aLoad_2 = new ALoad_2();
    private static final Instruction aLoad_3 = new ALoad_3();
    // private static final Instruction iaLoad = new IaLoad();
    // ...
    private static final Instruction iStore = new IStore();
    private static final Instruction lStore = new LStore();
    // private static final Instruction fStore = new FStore();
    // private static final Instruction dStore = new DStore();
    private static final Instruction aStore = new AStore();
    private static final Instruction iStore_0 = new IStore_0();
    private static final Instruction iStore_1 = new IStore_1();
    private static final Instruction iStore_2 = new IStore_2();
    private static final Instruction iStore_3 = new IStore_3();
    private static final Instruction lStore_0 = new LStore_0();
    private static final Instruction lStore_1 = new LStore_1();
    private static final Instruction lStore_2 = new LStore_2();
    private static final Instruction lStore_3 = new LStore_3();
    // private static final Instruction fStore_0 = new FStore_0();
    // private static final Instruction fStore_1 = new FStore_1();
    // private static final Instruction fStore_2 = new FStore_2();
    // private static final Instruction fStore_3 = new FStore_3();
    // private static final Instruction dStore_0 = new DStore_0();
    // private static final Instruction dStore_1 = new DStore_1();
    // private static final Instruction dStore_2 = new DStore_2();
    // private static final Instruction dStore_3 = new DStore_3();
    private static final Instruction aStore_0 = new AStore_0();
    private static final Instruction aStore_1 = new AStore_1();
    private static final Instruction aStore_2 = new AStore_2();
    private static final Instruction aStore_3 = new AStore_3();
    // private static final Instruction iaStore = new IAStore();
    // private static final Instruction laStore = new LAStore();
    // private static final Instruction faStore = new FAStore();
    // private static final Instruction daStore = new DAStore();
    // private static final Instruction aaStore = new AAStore();
    // private static final Instruction baStore = new BAStore();
    // private static final Instruction caStore = new CAStore();
    // private static final Instruction saStore = new SAStore();
    private static final Instruction pop = new Pop();
    private static final Instruction pop2 = new Pop2();
    private static final Instruction dup = new Dup();
    private static final Instruction dup_x1 = new Dup_X1();
    private static final Instruction dup_x2 = new Dup_X2();
    private static final Instruction dup2 = new Dup2();
    private static final Instruction dup2_x1 = new Dup2_X1();
    private static final Instruction dup2_x2 = new Dup2_X2();
    private static final Instruction swap = new Swap();
    private static final Instruction iAdd=new IAdd();
    private static final Instruction lAdd=new LAdd();
    private static final Instruction fAdd=new FAdd();
    private static final Instruction dAdd=new DAdd();
    private static final Instruction iSub=new ISub();
    private static final Instruction lSub=new LSub();
    private static final Instruction fSub=new FSub();
    private static final Instruction dSub=new DSub();
    private static final Instruction iMul=new IMul();
    private static final Instruction lMul=new LMul();
    private static final Instruction fMul=new FMul();
    private static final Instruction dMul=new DMul();
    private static final Instruction iDiv=new IDiv();
    private static final Instruction lDiv=new LDiv();
    private static final Instruction fDiv=new FDiv();
    private static final Instruction dDiv=new DDiv();
    private static final Instruction iRem=new IRem();
    private static final Instruction lRem=new LRem();
    private static final Instruction fRem=new FRem();
    private static final Instruction dRem=new DRem();
    private static final Instruction iNeg=new INeg();
    private static final Instruction lNeg=new LNeg();
    private static final Instruction fNeg=new FNeg();
    private static final Instruction dNeg=new DNeg();
    private static final Instruction iShL=new IShL();
    private static final Instruction lShL=new LShL();
    private static final Instruction iShR=new IShR();
    private static final Instruction lShR=new LShR();
    private static final Instruction iuShR=new IUShR();
    private static final Instruction luShR=new LUShR();
    private static final Instruction iAnd=new IAnd();
    private static final Instruction lAnd=new LAnd();
    private static final Instruction ior=new Ior();
    private static final Instruction lor=new Lor();
    private static final Instruction ixor=new IxOr();
    private static final Instruction lxor=new IxOr();
    private static final Instruction iinc=new Iinc();
    private static final Instruction i2l=new I2L();
    private static final Instruction i2f=new I2F();
    private static final Instruction i2d=new I2D();
    private static final Instruction l2i=new L2I();
    private static final Instruction l2f=new L2F();
    private static final Instruction l2d=new L2D();
    private static final Instruction f2i=new F2I();
    private static final Instruction f2l=new F2L();
    private static final Instruction f2d=new F2D();
    private static final Instruction d2i=new D2I();
    private static final Instruction d2l=new D2L();
    private static final Instruction d2f=new D2F();
    private static final Instruction i2b=new I2B();
    private static final Instruction i2c=new I2C();
    private static final Instruction i2s=new I2S();
    private static final Instruction lcmp=new Lcmp();
    private static final Instruction fcmpl=new Fcmpl();
    private static final Instruction dcmpG=new DcmpG();
    private static final Instruction dcmpL=new DcmpL();
    private static final Instruction ifEQ=new IfEQ();
    private static final Instruction ifNE=new IfNE();
    private static final Instruction ifLT=new IfLT();
    private static final Instruction ifGE=new IfGE();
    private static final Instruction ifGT=new IfGT();
    private static final Instruction ifLE=new IfLE();
    private static final Instruction if_icmpEQ=new If_IcmpEQ();
    private static final Instruction if_icmpNE=new If_IcmpNE();
    private static final Instruction if_icmpLT=new If_IcmpLT();
    private static final Instruction if_icmpGE=new If_IcmpGE();
    private static final Instruction if_icmpGT=new If_IcmpGT();
    private static final Instruction if_icmpLE=new If_IcmpLE();
    private static final Instruction if_acmpEQ=new If_AcmpEQ();
    private static final Instruction if_acmpNE=new If_AcmpNE();
    private static final Instruction goTo=new GoTo();
    // private static final Instruction jsr=new Jsr();
    // private static final Instruction ret=new Ret();
    private static final Instruction tableSwitch=new TableSwitch();
    private static final Instruction lookUpSwitch=new LookUpSwitch();
    public static final Map<Integer, Instruction> instructionMap;

    static
    {
        instructionMap = new HashMap<>();
        instructionMap.put(0x00, nop);
        instructionMap.put(0x01, aConstNull);
        instructionMap.put(0x02, iConst_m1);
        instructionMap.put(0x03, iConst_0);
        instructionMap.put(0x04, iConst_1);
        instructionMap.put(0x05, iConst_2);
        instructionMap.put(0x06, iConst_3);
        instructionMap.put(0x07, iConst_4);
        instructionMap.put(0x08, iConst_5);
        instructionMap.put(0x09, lConst_0);
        instructionMap.put(0x0a, lConst_1);
        instructionMap.put(0x0b, fConst_0);
        instructionMap.put(0x0c, fConst_1);
        instructionMap.put(0x0d, fConst_2);
        instructionMap.put(0x0e, dConst_0);
        instructionMap.put(0x0f, dConst_1);
        instructionMap.put(0x10, biPush);
        instructionMap.put(0x11, siPush);
        // instructionMap.put(0x12, idc);
        // instructionMap.put(0x13, idc_w);
        // instructionMap.put(0x14, idc2_w);
        instructionMap.put(0x15, iLoad);
        instructionMap.put(0x16, lLoad);
        instructionMap.put(0x17, fLoad);
        instructionMap.put(0x18, dLoad);
        instructionMap.put(0x19, aLoad);
        instructionMap.put(0x1a, iLoad_0);
        instructionMap.put(0x1b, iLoad_1);
        instructionMap.put(0x1c, iLoad_2);
        instructionMap.put(0x1d, iLoad_3);
        instructionMap.put(0x1e, lLoad_0);
        instructionMap.put(0x1f, lLoad_1);
        instructionMap.put(0x20, lLoad_2);
        instructionMap.put(0x21, lLoad_3);
        instructionMap.put(0x22, fLoad_0);
        instructionMap.put(0x23, fLoad_1);
        instructionMap.put(0x24, fLoad_2);
        instructionMap.put(0x25, fLoad_3);
        instructionMap.put(0x26, dLoad_0);
        instructionMap.put(0x27, dLoad_1);
        instructionMap.put(0x28, dLoad_2);
        instructionMap.put(0x29, dLoad_3);
        instructionMap.put(0x2a, aLoad_0);
        instructionMap.put(0x2b, aLoad_1);
        instructionMap.put(0x2c, aLoad_2);
        instructionMap.put(0x2d, aLoad_3);
        // instructionMap.put(0x2e, iaLoad);
        // instructionMap.put(0x2f, laLoad);
        // instructionMap.put(0x30, faLoad);
        // instructionMap.put(0x31, daLoad);
        // instructionMap.put(0x32, aaLoad);
        // instructionMap.put(0x33, baLoad);
        // instructionMap.put(0x34, caLoad);
        // instructionMap.put(0x35, saLoad);
        instructionMap.put(0x36, iStore);
        instructionMap.put(0x37, lStore);
        // instructionMap.put(0x38, fStore);
        // instructionMap.put(0x39, dStore);
        instructionMap.put(0x3a, aStore);
        instructionMap.put(0x3b, iStore_0);
        instructionMap.put(0x3c, iStore_1);
        instructionMap.put(0x3d, iStore_2);
        instructionMap.put(0x3e, iStore_3);
        instructionMap.put(0x3f, lStore_0);
        instructionMap.put(0x40, lStore_1);
        instructionMap.put(0x41, lStore_2);
        instructionMap.put(0x42, lStore_3);
        // instructionMap.put(0x43, fStore_0);
        // instructionMap.put(0x44, fStore_1);
        // instructionMap.put(0x45, fStore_2);
        // instructionMap.put(0x46, fStore_3);
        // instructionMap.put(0x47, dStore_0);
        // instructionMap.put(0x48, dStore_1);
        // instructionMap.put(0x49, dStore_2);
        // instructionMap.put(0x4a, dStore_3);
        instructionMap.put(0x4b, aStore_0);
        instructionMap.put(0x4c, aStore_1);
        instructionMap.put(0x4d, aStore_2);
        instructionMap.put(0x4e, aStore_3);
        // instructionMap.put(0x4f, iaStore);
        // instructionMap.put(0x50, laStore);
        // instructionMap.put(0x51, faStore);
        // instructionMap.put(0x52, daStore);
        // instructionMap.put(0x53, aaStore);
        // instructionMap.put(0x54, baStore);
        // instructionMap.put(0x55, caStore);
        // instructionMap.put(0x56, saStore);
        instructionMap.put(0x57,pop);
        instructionMap.put(0x58,pop2);
        instructionMap.put(0x59,dup);
        instructionMap.put(0x5a,dup_x1);
        instructionMap.put(0x5b,dup_x2);
        instructionMap.put(0x5c,dup2);
        instructionMap.put(0x5d,dup2_x1);
        instructionMap.put(0x5e,dup2_x2);
        instructionMap.put(0x5f,swap);
        instructionMap.put(0x60,iAdd);
        instructionMap.put(0x61,lAdd);
        instructionMap.put(0x62,fAdd);
        instructionMap.put(0x63,dAdd);
        instructionMap.put(0x64,iSub);
        instructionMap.put(0x65,lSub);
        instructionMap.put(0x66,fSub);
        instructionMap.put(0x67,dSub);
        instructionMap.put(0x68,iMul);
        instructionMap.put(0x69,lMul);
        instructionMap.put(0x6a,fMul);
        instructionMap.put(0x6b,dMul);
        instructionMap.put(0x6c,iDiv);
        instructionMap.put(0x6d,lDiv);
        instructionMap.put(0x6e,fDiv);
        instructionMap.put(0x6f,dDiv);
        instructionMap.put(0x70,iRem);
        instructionMap.put(0x71,lRem);
        instructionMap.put(0x72,fRem);
        instructionMap.put(0x73,dRem);
        instructionMap.put(0x74,iNeg);
        instructionMap.put(0x75,lNeg);
        instructionMap.put(0x76,fNeg);
        instructionMap.put(0x77,dNeg);
        instructionMap.put(0x78,iShL);
        instructionMap.put(0x79,iShR);
        instructionMap.put(0x7a,lShL);
        instructionMap.put(0x7b,lShR);
        instructionMap.put(0x7c,iuShR);
        instructionMap.put(0x7d,luShR);
        instructionMap.put(0x7e,iAnd);
        instructionMap.put(0x7f,lAnd);
        instructionMap.put(0x80,ior);
        instructionMap.put(0x81,lor);
        instructionMap.put(0x82,ixor);
        instructionMap.put(0x83,lxor);
        instructionMap.put(0x84,iinc);
        instructionMap.put(0x85,i2l);
        instructionMap.put(0x86,i2f);
        instructionMap.put(0x87,i2d);
        instructionMap.put(0x88,l2i);
        instructionMap.put(0x89,l2f);
        instructionMap.put(0x8a,l2d);
        instructionMap.put(0x8b,f2i);
        instructionMap.put(0x8c,f2l);
        instructionMap.put(0x8d,f2d);
        instructionMap.put(0x8e,d2i);
        instructionMap.put(0x8f,d2l);
        instructionMap.put(0x90,d2f);
        instructionMap.put(0x91,i2b);
        instructionMap.put(0x92,i2c);
        instructionMap.put(0x93,i2s);

        instructionMap.put(0x94,lcmp);
        instructionMap.put(0x95,fcmpl);
        instructionMap.put(0x96,dcmpG);
        instructionMap.put(0x97,dcmpL);
        instructionMap.put(0x98,ifEQ);
        instructionMap.put(0x99,ifNE);
        instructionMap.put(0x9a,ifLT);
        instructionMap.put(0x9b,ifGE);
        instructionMap.put(0x9c,ifGT);
        instructionMap.put(0x9e,ifLE);
        instructionMap.put(0x9f,if_icmpEQ);
        instructionMap.put(0xa0,if_icmpNE);
        instructionMap.put(0xa1,if_icmpLT);
        instructionMap.put(0xa2,if_icmpGE);
        instructionMap.put(0xa3,if_icmpGT);
        instructionMap.put(0xa4,if_icmpLE);
        instructionMap.put(0xa5,if_acmpEQ);
        instructionMap.put(0xa6,if_acmpNE);
        instructionMap.put(0xa7,goTo);
        // instructionMap.put(0xa8,jsr);
        // instructionMap.put(0xa9,ret);
        instructionMap.put(0xaa,tableSwitch);
        instructionMap.put(0xab,lookUpSwitch);
    }

    public static Instruction NewInstruction(short code)
    {
        return instructionMap.get((int)code);
    }
}
